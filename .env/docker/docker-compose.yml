version: '3.8'

services:

  # The Jaeger team recommends Elasticsearch as the storage backend over Cassandra

  #  Rollover lets you configure when to roll over to a new index based on one or more of the following criteria:
  #
  #    max_age - the maximum age of the index. It uses time units: d, h, m.
  #    max_docs - the maximum documents in the index.
  #    max_size - the maximum estimated size of primary shards (since Elasticsearch 6.x). It uses byte size units tb, gb, mb.

  # ElasticSearch
  # Shards and Replicas for Elasticsearch indices
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
#      - cluster.name=jaeger-cluster
#      - http.host=0.0.0.0
#      - transport.host=127.0.0.1
#      - ES_JAVA_OPTS=-Xms512m -Xmx512m
#      - xpack.security.enabled=false
    ports:
      - 9200:9200


  #The following command prepares Elasticsearch for rollover deployment by creating index aliases, indices, and index templates:
  #  docker run -it --rm --net=host jaegertracing/jaeger-es-rollover:latest init http://localhost:9200


  # Координатор брокера сообщений
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181


  # Брокер сообщений
  # Kafka является буффером для отправки сообщений в Elastic
  kafka:
    depends_on:
      - zookeeper
#    image: bitnami/kafka:2.3.0
    image: confluentinc/cp-enterprise-kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_BROKER_ID=1
#      KAFKA_ZOOKEEPER_CONNECT: localhost:22181,localhost:32181,localhost:42181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:19092

      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CREATE_TOPICS="jaeger_v1_test:1:1"
#      - KAFKA_NUM_PARTITIONS=1
#      Today, Kafka doesn't save topic offsets for consumers in Zookeeper anymore but in "internal topics" with name
#      __consumer_offsets. Of course, if you have 1 broker you can't have a replication factor of 3. So I'd like to take
#      a look at your server.properties. If the above property is missing, the default is 3
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    restart: on-failure


  # At default settings the collector exposes the following ports:
  #  Port	Protocol	Function
  #  14250	gRPC	used by jaeger-agent to send spans in model.proto format
  #  14268	HTTP	can accept spans directly from clients in jaeger.thrift format over binary thrift protocol
  #  9411	HTTP	can accept Zipkin spans in Thrift, JSON and Proto (disabled by default)
  #  14269	HTTP	admin port: health check at / and metrics at /metrics

  #  docker run \
  #  -e SPAN_STORAGE_TYPE=kafka \
  #  -e KAFKA_PRODUCER_BROKERS=<...> \
  #  -e KAFKA_TOPIC=<...> \
  #  jaegertracing/jaeger-collector:1.19

  # Буффер трассировок перед отправкой в кафку
  # Умеет отправлять данные в Elastic в обход кафки
  jaeger-collector:
    depends_on:
      - kafka
    image: jaegertracing/jaeger-collector:1.20
    command: ["--kafka.producer.brokers=kafka:9092", "--kafka.producer.topic=jaeger_v1_test"]
    ports:
      # used by jaeger-agent to send spans
      - 14250:14250
      # HTTP collector port to receive directly spans from clients (отключено, должны обращаться к агенту)
      # - 14268:14268
      # HTTP health check port: $ curl -v http://localhost:14269/
      - 14269:14269
    environment:
      LOG_LEVEL: debug
      SPAN_STORAGE_TYPE: kafka
#      KAFKA_PRODUCER_BROKERS: kafka:9092
#      KAFKA_TOPIC: jaeger_v1_test
    restart: on-failure


  # Jaeger Agent
  #  docker run \
  #  --rm \
  #  -p5775:5775/udp \
  #  -p6831:6831/udp \
  #  -p6832:6832/udp \
  #  -p5778:5778/tcp \
  #  jaegertracing/jaeger-agent:1.19 \
  #  reporter.grpc.host-port=jaeger-collector1:14250,jaeger-collector2:14250,jaeger-collector3:14250

  # Агент трассировки, получающий данные от сервиса и отправляющий их на коллектор
  # Может осуществлять обогащение данных по трассировке дополнительными данными
  jaeger-agent:
    depends_on:
      - jaeger-collector
    image: jaegertracing/jaeger-agent:1.20
    command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    environment:
      - LOG_LEVEL=debug
#      - SPAN_STORAGE_TYPE=elasticsearch
    restart: on-failure


  #  docker run \
  #  -e SPAN_STORAGE_TYPE=elasticsearch \
  #  jaegertracing/jaeger-ingester:1.19

  # Сервис чтения сообщений из Кафки и отправки их в Elastic
  jaeger-ingester:
    depends_on:
      - kafka
      - elasticsearch
    image: jaegertracing/jaeger-ingester:1.20
    command: ["--es.server-urls=http://elasticsearch:9200", "--kafka.consumer.brokers=kafka:9092", "--kafka.consumer.topic=jaeger_v1_test"]
    ports:
      # HTTP health check port: $ curl -v http://localhost:14270/
      - 14270:14270
      # Metrics port: $ curl http://localhost:14271/metrics
      - 14271:14271
    environment:
      LOG_LEVEL: "debug"
#      INGESTER_PARALLELISM: "1"
      INGESTER_DEADLOCKINTERVAL: "0ms"
      SPAN_STORAGE_TYPE: "elasticsearch"
#      METRICS_BACKEND: "expvar"
    restart: on-failure


  # Сервис получения данных из Elastic
  jaeger-query:
    depends_on:
      - elasticsearch
    image: jaegertracing/jaeger-query:1.20
    command: ["--es.server-urls=http://elasticsearch:9200"]
#   command: [
#      "--es.server-urls=http://elasticsearch:9200",
#      "--span-storage.type=elasticsearch",
#      "--log-level=debug"
#    ]
    ports:
      # Jaeger UI port
      - "16686:16686"
      # HTTP health check port: $ curl -v http://localhost:16687/
      - "16687:16687"
    environment:
#      LOG_LEVEL: "info"
      SPAN_STORAGE_TYPE: "elasticsearch"
    restart: on-failure


  # Client service
  client-service:
    depends_on:
      - jaeger-agent
      - jaeger-ingester
    container_name: client-service
    build:
      context: ../../client
    ports:
      - 8080:8080
    environment:
      REMOTE_SERVER_URL: remote-service
      REMOTE_SERVER_PORT: 8081
      REMOTE_SERVER_PATH: /remote


  # Remote service
  remote-service:
    depends_on:
      - jaeger-agent
      - jaeger-ingester
    container_name: remote-service
    build:
      context: ../../remote
    ports:
      - 8081:8081
      - 5005:5005